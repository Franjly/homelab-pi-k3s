argo-cd:
  ## Globally shared configuration
  global:
    # -- Default domain used by all components
    ## Used for ingresses, certificates, SSO, notifications, etc.
    domain: argocd.local.tecno-fly.com

    # Default logging options used by all components
    logging:
      # -- Set the global logging format. Either: `text` or `json`
      format: text
      # -- Set the global logging level. One of: `debug`, `info`, `warn` or `error`
      level: info

    # -- Annotations for the all deployed Statefulsets
    statefulsetAnnotations: {}

    # -- Annotations for the all deployed Deployments
    deploymentAnnotations: {}

    # -- Annotations for the all deployed pods
    podAnnotations: {}

    # -- Labels for the all deployed pods
    podLabels: {}

    # -- Add Prometheus scrape annotations to all metrics services. This can be used as an alternative to the ServiceMonitors.
    addPrometheusAnnotations: false

    # Default network policy rules used by all components
    networkPolicy:
      # -- Create NetworkPolicy objects for all components
      create: false
      # -- Default deny all ingress traffic
      defaultDenyIngress: false

    # -- Environment variables to pass to all deployed Deployments
    env: []

    # -- Annotations for the all deployed Certificates
    certificateAnnotations: {}

  ## Argo Configs
  configs:
    # General Argo CD configuration
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
    cm:
      # -- Create the argocd-cm configmap for [declarative setup]
      create: true

      # -- Enable exec feature in Argo UI
      ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource
      exec.enabled: true

      # -- Enable local admin user
      ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
      admin.enabled: false

      # -- Timeout to discover if a new manifests version got published to the repository
      timeout.reconciliation: 180s

      # -- Timeout to refresh application data as well as target manifests cache
      timeout.hard.reconciliation: 0s

      # -- Enable Status Badge
      ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge/
      statusbadge.enabled: false

      accounts.fly: apiKey, login, exec
      accounts.argocd: apiKey, login, exec

      resource.customizations: |
        argoproj.io/Application:
          health.lua: |
            hs = {}
            hs.status = "Progressing"
            hs.message = ""
            if obj.status ~= nil then
              if obj.status.health ~= nil then
                hs.status = obj.status.health.status
                if obj.status.health.message ~= nil then
                  hs.message = obj.status.health.message
                end
              end
            end
            return hs

    # Argo CD configuration parameters
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
    params:
      # -- Create the argocd-cmd-params-cm configmap
      # If false, it is expected the configmap will be created by something else.
      create: true

      ## Generic parameters
      # -- Open-Telemetry collector address: (e.g. "otel-collector:4317")
      otlp.address: ''

      ## Controller Properties
      # -- Number of application status processors
      controller.status.processors: 20
      # -- Number of application operation processors
      controller.operation.processors: 10
      # -- Specifies timeout between application self heal attempts
      controller.self.heal.timeout.seconds: 5
      # -- Repo server RPC call timeout seconds.
      controller.repo.server.timeout.seconds: 60

      ## Repo-server properties
      # -- Limit on number of concurrent manifests generate requests. Any value less the 1 means no limit.
      reposerver.parallelism.limit: 0

      ## ApplicationSet Properties
      # -- Modify how application is synced between the generator and the cluster. One of: `sync`, `create-only`, `create-update`, `create-delete`
      applicationsetcontroller.policy: sync
      # -- Enables use of the Progressive Syncs capability
      applicationsetcontroller.enable.progressive.syncs: false

      # -- JQ Path expression timeout
      ## By default, the evaluation of a JQPathExpression is limited to one second.
      ## If you encounter a "JQ patch execution timed out" error message due to a complex JQPathExpression
      ## that requires more time to evaluate, you can extend the timeout period.
      controller.ignore.normalizer.jq.timeout: "1s"

    # Argo CD RBAC policy configuration
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
    rbac:
      # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
      # If false, it is expected the configmap will be created by something else.
      # Argo CD will not work if there is no configmap created with the name above.
      create: true

      # -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).
      # If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
      policy.default: role:readonly

      # -- File containing user-defined policies and role definitions.
      # @default -- `''` (See [values.yaml])
      policy.csv: |
        p, role:argocd, applications, *, */*, allow
        p, role:argocd, projects, *, *, allow
        p, role:argocd, repositories, *, *, allow
        g, fly, role:admin
        g, argocd, role:argocd

    # SSH known hosts for Git repositories
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#ssh-known-host-public-keys
    ssh:
      # -- Known hosts to be added to the known host list by default.
      # @default -- See [values.yaml]
      knownHosts: |
        [ssh.github.com]:443 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
        [ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
        [ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
        bitbucket.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPIQmuzMBuKdWeF4+a2sjSSpBK0iqitSQ+5BM9KhpexuGt20JpTVM7u5BDZngncgrqDMbWdxMWWOGtZ9UgbqgZE=
        bitbucket.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIazEu89wgQZ4bqs3d63QSMzYVa0MuJ2e2gKTKqu+UUO
        bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDQeJzhupRu0u0cdegZIa8e86EG2qOCsIsD1Xw0xSeiPDlCr7kq97NLmMbpKTX6Esc30NuoqEEHCuc7yWtwp8dI76EEEB1VqY9QJq6vk+aySyboD5QF61I/1WeTwu+deCbgKMGbUijeXhtfbxSxm6JwGrXrhBdofTsbKRUsrN1WoNgUa8uqN1Vx6WAJw1JHPhglEGGHea6QICwJOAr/6mrui/oB7pkaWKHj3z7d1IC4KWLtY47elvjbaTlkN04Kc/5LFEirorGYVbt15kAUlqGM65pk6ZBxtaO3+30LVlORZkxOh+LKL/BvbZ/iRNhItLqNyieoQj/uh/7Iv4uyH/cV/0b4WDSd3DptigWq84lJubb9t/DnZlrJazxyDCulTmKdOR7vs9gMTo+uoIrPSb8ScTtvw65+odKAlBj59dhnVp9zd7QUojOpXlL62Aw56U4oO+FALuevvMjiWeavKhJqlR7i5n9srYcrNV7ttmDw7kf/97P5zauIhxcjX+xHv4M=
        github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
        github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
        github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
        gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
        gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
        gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
        ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
        vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H

      # -- Additional known hosts for private repositories
      extraHosts: ''

    # ConfigMap for Config Management Plugins
    # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/
    cmp:
      # -- Create the argocd-cmp-cm configmap
      create: true

      # -- Plugin yaml files to be added to argocd-cmp-cm
      plugins:
        argocd-vault-plugin:
          init:
            command: [sh]
            args: [-c, 'echo "Initializing..."']
          generate:
            command: ["argocd-vault-plugin"]
            args: ["generate", "./"]
          discover:
            find:
              command: [sh, -c, find . -name kustomization.yaml]
        kustomized-helm:
          init:
            command: ["/bin/sh", "-c"]
            args: ["helm dependency build"]
          generate:
            command: [sh, -c]
            args: ["helm template $ARGOCD_APP_NAME --include-crds $ARGOCD_ENV_EXTRA_ARGS --namespace $ARGOCD_APP_NAMESPACE . > resources/all.yaml && kustomize build | argocd-vault-plugin generate -"]
          discover:
            find:
              command: [sh, -c, find . -name kustomization.yaml]
        vault-kustomized-helm:
          init:
            command: ["/bin/sh", "-c"]
            args: ["helm dependency build"]
          generate:
            command: [sh, -c]
            args: ["helm template $ARGOCD_APP_NAME --include-crds $ARGOCD_ENV_EXTRA_ARGS --namespace $ARGOCD_APP_NAMESPACE . > resources/all.yaml && kustomize build | argocd-vault-plugin generate -"]
          discover:
            find:
              command: [sh, -c, find . -name kustomization.yaml]
        vault-kustomized:
          init:
            command: [sh]
            args: [-c, 'echo "Initializing..."']
          generate:
            command: [sh, -c]
            args: ["kustomize build | argocd-vault-plugin generate -"]
          discover:
            find:
              command: [sh, -c, find . -name kustomization.yaml]

    # -- Repositories list to be used by applications
    ## Creates a secret for each key/value specified below to create repositories
    ## Note: the last example in the list would use a repository credential template, configured under "configs.credentialTemplates".
    repositories:
      github-homelab-pi-k3s:
        name: github-homelab-pi-k3s
        url: https://github.com/Franjly/homelab-pi-k3s.git
        password: <path:pi-k3s/data/platform/argocd#github_accessToken>
        type: git
      github-argocd-homelab-pi-k3s:
        name: github-argocd-homelab-pi-k3s
        url: https://github.com/Franjly/argocd-homelab-pi-k3s.git
        password: <path:pi-k3s/data/platform/argocd#github_accessToken>
        type: git
      gitea-homelab-pi-k3s:
        name: gitea-homelab-pi-k3s
        url: https://gitea.local.tecno-fly.com/homelab/homelab-pi-k3s.git
        type: git
        insecure: "true"
      gitea-argocd-homelab-pi-k3s:
        name: gitea-argocd-homelab-pi-k3s
        url: https://gitea.local.tecno-fly.com/homelab/argocd-homelab-pi-k3s.git
        type: git
        insecure: "true"

    # Argo CD sensitive data
    # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
    secret:
      # -- Create the argocd-secret
      createSecret: true

      # -- Shared secret for authenticating GitHub webhook events
      githubSecret: ""

      # -- add additional secrets to be added to argocd-secret
      ## Custom secrets. Useful for injecting SSO secrets into environment variables.
      ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
      ## Note that all values must be non-empty.
      extra:
        {}
        # LDAP_PASSWORD: "mypassword"

    # -- Define custom [CSS styles] for your argo instance.
    # This setting will automatically mount the provided CSS and reference it in the argo configuration.
    # @default -- `""` (See [values.yaml])
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/
    styles: ""
    # styles: |
    #  .sidebar {
    #    background: linear-gradient(to bottom, #999, #777, #333, #222, #111);
    #  }

  # -- Array of extra K8s manifests to deploy
  ## Note: Supports use of custom Helm templates
  extraObjects:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: argocd-repo-server
        namespace: argocd
        annotations:
          kubernetes.io/service-account.name: argocd-repo-server
      type: kubernetes.io/service-account-token
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: argocd-role-tokenreview-binding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:auth-delegator
      subjects:
        - kind: ServiceAccount
          name: argocd-repo-server
          namespace: argocd
    - apiVersion: v1
      kind: Secret
      metadata:
        name: argocd-vault-plugin-credentials
        namespace: argocd
      type: Opaque
      data:
          VAULT_ADDR: aHR0cDovL3ZhdWx0LnZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsOjgyMDA=
          AVP_TYPE: dmF1bHQ=
          AVP_AUTH_TYPE: azhz
          AVP_K8S_ROLE: YXJnb2Nk

  ## Application controller
  controller:
    # -- Application controller name string
    name: application-controller

    # -- The number of application controller pods to run.
    # Additional replicas will cause sharding of managed clusters across number of replicas.
    ## With dynamic cluster distribution turned on, sharding of the clusters will gracefully
    ## rebalance if the number of replica's changes or one becomes unhealthy. (alpha)
    replicas: 1

    ## Application controller metrics configuration
    metrics:
      # -- Deploy metrics service
      enabled: true
      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: true
      rules:
        # -- Deploy a PrometheusRule for the application controller
        enabled: true
        # -- PrometheusRule namespace
        namespace: "" # "monitoring"

        # -- PrometheusRule.Spec for the application controller
        spec:
        - alert: ArgoAppMissing
          expr: |
            absent(argocd_app_info)
          for: 15m
          labels:
            severity: critical
          annotations:
            summary: "[Argo CD] No reported applications"
            description: >
              Argo CD has not reported any applications data for the past 15 minutes which
              means that it must be down or not functioning properly.  This needs to be
              resolved for this cloud to continue to maintain state.
        - alert: ArgoAppNotSynced
          expr: |
            argocd_app_info{sync_status!="Synced"} == 1
          for: 12h
          labels:
            severity: warning
          annotations:
            summary: "**[{{$labels.name}}]** Application not synchronized"
            description: >
              The application **[{{$labels.name}}]** has not been synchronized for over
              12 hours which means that the state of this cloud has drifted away from the
              state inside Git.

  ## Dex
  dex:
    # -- Enable dex
    enabled: false
    # -- Dex name
    name: dex-server

    metrics:
      # -- Deploy metrics service
      enabled: false
      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: false

  ## Redis
  redis:
    # -- Enable redis
    enabled: true
    # -- Redis name
    name: redis

    ## Prometheus redis-exporter sidecar
    exporter:
      # -- Enable Prometheus redis-exporter sidecar
      enabled: false

    metrics:
      # -- Deploy metrics service
      enabled: false

      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: false

  ## Redis-HA subchart replaces custom redis deployment when `redis-ha.enabled=true`
  # Ref: https://github.com/DandyDeveloper/charts/blob/master/charts/redis-ha/values.yaml
  redis-ha:
    # -- Enables the Redis HA subchart and disables the custom Redis single node deployment
    enabled: false

    ## Prometheus redis-exporter sidecar
    exporter:
      # -- Enable Prometheus redis-exporter sidecar
      enabled: false

  redisSecretInit:
    # -- Enable Redis secret initialization. If disabled, secret must be provisioned by alternative methods
    enabled: true
    # -- Redis secret-init name
    name: redis-secret-init

  ## Server
  server:
    # -- Argo CD server name
    name: server

    # -- The number of server pods to run
    replicas: 1

    ## Argo CD extensions
    ## This function in tech preview stage, do expect instability or breaking changes in newer versions.
    ## Ref: https://github.com/argoproj-labs/argocd-extension-installer
    ## When you enable extensions, you need to configure RBAC of logged in Argo CD user.
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#the-extensions-resource
    extensions:
      # -- Enable support for Argo CD extensions
      enabled: false

      # -- Extensions for Argo CD
      # @default -- `[]` (See [values.yaml])
      ## Ref: https://github.com/argoproj-labs/argocd-extension-metrics#install-ui-extension
      extensionList: []
      #  - name: extension-metrics
      #    env:
      #      - name: EXTENSION_URL
      #        value: https://github.com/argoproj-labs/argocd-extension-metrics/releases/download/v1.0.0/extension.tar.gz
      #      - name: EXTENSION_CHECKSUM_URL
      #        value: https://github.com/argoproj-labs/argocd-extension-metrics/releases/download/v1.0.0/extension_checksums.txt

    # TLS certificate configuration via cert-manager
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-certificates-used-by-argocd-server
    certificate:
      # -- Deploy a Certificate resource (requires cert-manager)
      enabled: false
      # -- Certificate primary domain (commonName)
      # @default -- `""` (defaults to global.domain)
      domain: ""
      # -- Certificate Subject Alternate Names (SANs)
      additionalHosts: []
      # -- The requested 'duration' (i.e. lifetime) of the certificate.
      # @default -- `""` (defaults to 2160h = 90d if not specified)
      ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
      duration: ""
      # -- How long before the expiry a certificate should be renewed.
      # @default -- `""` (defaults to 360h = 15d if not specified)
      ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
      renewBefore: ""
      # Certificate issuer
      ## Ref: https://cert-manager.io/docs/concepts/issuer
      issuer:
        # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
        group: ""
        # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
        kind: ""
        # -- Certificate issuer name. Eg. `letsencrypt`
        name: ""
      # Private key of the certificate
      privateKey:
        # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
        rotationPolicy: Never
        # -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`
        encoding: PKCS1
        # -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`
        algorithm: RSA
        # -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.
        size: 2048
      # -- Annotations to be applied to the Server Certificate
      annotations: {}
      # -- Usages for the certificate
      ### Ref: https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.KeyUsage
      usages: []
      # -- Annotations that allow the certificate to be composed from data residing in existing Kubernetes Resources
      secretTemplateAnnotations: {}

    ## Server metrics service configuration
    metrics:
      # -- Deploy metrics service
      enabled: true
      
      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: true
        # -- Prometheus ServiceMonitor namespace
        namespace: ""  # monitoring

    # Argo CD server ingress configuration
    ingress:
      # -- Enable an ingress resource for the Argo CD server
      enabled: true
      # -- Specific implementation for ingress controller. One of `generic`, `aws` or `gke`
      ## Additional configuration might be required in related configuration sections
      controller: generic
      # -- Additional ingress annotations
      ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough
      annotations:
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        cert-manager.io/cluster-issuer: letsencrypt-staging
        hajimari.io/appName: ArgoCD
        hajimari.io/icon: sync-circle
        hajimari.io/group: DevOps
        hajimari.io/targetBlank: 'false'

      # -- Defines which ingress controller will implement the resource
      ingressClassName: "nginx"

      # -- Argo CD server hostname
      # @default -- `""` (defaults to global.domain)
      hostname: ""

      # -- Enable TLS configuration for the hostname defined at `server.ingress.hostname`
      ## TLS certificate will be retrieved from a TLS secret `argocd-server-tls`
      ## You can create this secret via `certificate` or `certificateSecret` option
      tls: false

  ## Repo Server
  repoServer:
    # -- Repo server name
    name: repo-server

    # -- The number of repo server pods to run
    replicas: 1

    # -- envFrom to pass to repo server
    # @default -- `[]` (See [values.yaml])
    envFrom:
    - secretRef:
        name: argocd-vault-plugin-credentials
    # - configMapRef:
    #     name: config-map-name

    # -- Additional containers to be added to the repo server pod
    ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/config-management-plugins/
    ## Note: Supports use of custom Helm templates
    extraContainers:
      - name: kustomized-helm
        command: [/var/run/argocd/argocd-cmp-server]
        image: franjlytools/argocd-plugins-vault
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: plugin.yaml
            name: kustomized-helm
          # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps
          # mitigate path traversal attacks.
          - mountPath: /tmp
            name: cmp-tmp
      - name: vault-kustomized-helm
        command: [/var/run/argocd/argocd-cmp-server]
        image: franjlytools/argocd-plugins-vault
        envFrom:
        - secretRef:
            name: argocd-vault-plugin-credentials
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: plugin.yaml
            name: vault-kustomized-helm
          # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps
          # mitigate path traversal attacks.
          - mountPath: /tmp
            name: cmp-tmp 
      - name: vault-kustomized
        command: [/var/run/argocd/argocd-cmp-server]
        image: franjlytools/argocd-plugins-vault
        envFrom:
        - secretRef:
            name: argocd-vault-plugin-credentials
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: plugin.yaml
            name: vault-kustomized
          # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps
          # mitigate path traversal attacks.
          - mountPath: /tmp
            name: cmp-tmp 

    # -- Init containers to add to the repo server pods
    initContainers:
      - name: download-tools
        image: alpine
        command: [sh, -c]
        args:
          - wget -O argocd-vault-plugin
            https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v1.13.0/argocd-vault-plugin_1.13.0_linux_arm64

            chmod +x argocd-vault-plugin && mv argocd-vault-plugin /custom-tools/
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools

    # -- Additional volumeMounts to the repo server main container
    volumeMounts:
      - name: custom-tools
        mountPath: /usr/local/bin/argocd-vault-plugin
        subPath: argocd-vault-plugin

    # -- Additional volumes to the repo server pod
    volumes:
      - name: custom-tools
        emptyDir: {}
      - configMap:
          name: kustomized-helm
        name: kustomized-helm
      - configMap:
          name: vault-kustomized-helm
        name: vault-kustomized-helm
      - configMap:
          name: vault-kustomized
        name: vault-kustomized
      - emptyDir: {}
        name: cmp-tmp

    ## Repo server metrics service configuration
    metrics:
      # -- Deploy metrics service
      enabled: true

      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: true
        # -- Prometheus ServiceMonitor namespace
        namespace: "" # "monitoring"

  ## ApplicationSet controller
  applicationSet:
    # -- ApplicationSet controller name string
    name: applicationset-controller

    # -- The number of ApplicationSet controller pods to run
    replicas: 1

    ## Metrics service configuration
    metrics:
      # -- Deploy metrics service
      enabled: true

      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: true
        # -- Prometheus ServiceMonitor namespace
        namespace: ""  # monitoring

    # TLS certificate configuration via cert-manager
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-configuration
    certificate:
      # -- Deploy a Certificate resource (requires cert-manager)
      enabled: false
      # -- Certificate primary domain (commonName)
      # @default -- `""` (defaults to global.domain)
      domain: ""
      # -- Certificate Subject Alternate Names (SANs)
      additionalHosts: []
      # -- The requested 'duration' (i.e. lifetime) of the certificate.
      # @default -- `""` (defaults to 2160h = 90d if not specified)
      ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
      duration: ""
      # -- How long before the expiry a certificate should be renewed.
      # @default -- `""` (defaults to 360h = 15d if not specified)
      ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
      renewBefore: ""
      # Certificate issuer
      ## Ref: https://cert-manager.io/docs/concepts/issuer
      issuer:
        # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
        group: ""
        # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
        kind: ""
        # -- Certificate issuer name. Eg. `letsencrypt`
        name: ""
      # Private key of the certificate
      privateKey:
        # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
        rotationPolicy: Never
        # -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`
        encoding: PKCS1
        # -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`
        algorithm: RSA
        # -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.
        size: 2048
      # -- Annotations to be applied to the ApplicationSet Certificate
      annotations: {}

    ## Ingress for the Git Generator webhook
    ## Ref: https://argocd-applicationset.readthedocs.io/en/master/Generators-Git/#webhook-configuration)
    ingress:
      # -- Enable an ingress resource for ApplicationSet webhook
      enabled: false
      # -- Additional ingress labels
      labels: {}
      # -- Additional ingress annotations
      annotations: {}

      # -- Defines which ingress ApplicationSet controller will implement the resource
      ingressClassName: ""

      # -- Argo CD ApplicationSet hostname
      # @default -- `""` (defaults to global.domain)
      hostname: ""

      # -- List of ingress paths
      path: /api/webhook

      # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
      pathType: Prefix

      # -- Enable TLS configuration for the hostname defined at `applicationSet.webhook.ingress.hostname`
      ## TLS certificate will be retrieved from a TLS secret with name:`argocd-applicationset-controller-tls`
      tls: false

  ## Notifications controller
  notifications:
    # -- Enable notifications controller
    enabled: true

    # -- Notifications controller name string
    name: notifications-controller

    # -- Argo CD dashboard url; used in place of {{.context.argocdUrl}} in templates
    # @default -- `""` (defaults to https://`global.domain`)
    argocdUrl: ""

    secret:
      # -- Whether helm chart creates notifications controller secret
      ## If true, will create a secret with the name below. Otherwise, will assume existence of a secret with that name.
      create: true

      # -- notifications controller Secret name
      name: "argocd-notifications-secret"

      # -- Generic key:value pairs to be inserted into the secret
      ## Can be used for templates, notification services etc. Some examples given below.
      ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview/
      items: {}
        # slack-token:
        #   # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack/

        # grafana-apiKey:
        #   # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana/

        # webhooks-github-token:

        # email-username:
        # email-password:
          # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/email/

    metrics:
      # -- Enables prometheus metrics server
      enabled: true
      
      serviceMonitor:
        # -- Enable a prometheus ServiceMonitor
        enabled: true

    # -- Configures notification services such as slack, email or custom webhook
    # @default -- See [values.yaml]
    ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview/
    notifiers:
      service.webhook.discord: |
        url: <path:pi-k3s/data/platform/argocd#DISCORD_WEBHOOK>
        headers:
        - name: content-type
          value: application/json

    cm:
      # -- Whether helm chart creates notifications controller config map
      create: true

    # -- Contains centrally managed global application subscriptions
    ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions/
    subscriptions:
      - recipients:
        - discord
        triggers:
        - on-deployed
        - on-health-degraded
        - on-sync-failed
        - on-sync-running
        - on-sync-status-unknown
        - on-sync-succeeded

    # -- The notification template is used to generate the notification content
    ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/
    templates:
      template.app-deployed: |
        webhook:
          discord:
            method: POST
            body: |
              {
                "content": null,
                "embeds": [
                  {
                    "title": "[{{ .app.metadata.name}}] - New version of an application {{.app.metadata.name}} is up and running.",
                    "description": "Application {{.app.metadata.name}} is now running new version of deployments manifests.",
                    "url": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": 1621586,
                    "fields": [
                      {
                        "name": "Sync Status",
                        "value": "{{.app.status.sync.status}}"
                      },
                      {
                        "name": "Repository",
                        "value": "{{.app.spec.source.repoURL}}"
                      },
                      {
                        "name": "Revision",
                        "value": "{{.app.status.sync.revision}}"
                      }
                      {{range $index, $c := .app.status.conditions}}
                      {{if not $index}},{{end}}
                      {{if $index}},{{end}}
                      {
                        "name": "{{$c.type}}",
                        "value": "{{$c.message}}",
                      }
                      {{end}}
                    ]
                  }
                ],
                "attachments": []
              }
      template.app-health-degraded: |
        webhook:
          discord:
            method: POST
            body: |
              {
                "content": null,
                "embeds": [
                  {
                    "title": "[{{ .app.metadata.name}}] - Application {{.app.metadata.name}} has degraded.",
                    "description": "Application {{.app.metadata.name}} has degraded.\nApplication details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.",
                    "url": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": 16039984,
                    "fields": [
                      {
                        "name": "Sync Status",
                        "value": "{{.app.status.sync.status}}"
                      },
                      {
                        "name": "Repository",
                        "value": "{{.app.spec.source.repoURL}}"
                      }
                      {{range $index, $c := .app.status.conditions}}
                      {{if not $index}},{{end}}
                      {{if $index}},{{end}}
                      {
                        "name": "{{$c.type}}",
                        "value": "{{$c.message}}"
                      }
                      {{end}}
                    ]
                  }
                ],
                "attachments": []
              }
      template.app-sync-failed: |
        webhook:
          discord:
            method: POST
            body: |
              {
                "content": null,
                "embeds": [
                  {
                    "title": "[{{ .app.metadata.name}}] - Failed to sync application {{.app.metadata.name}}.",
                    "description": "The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\nSync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .",
                    "url": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": 15297910,
                    "fields": [
                      {
                        "name": "Sync Status",
                        "value": "{{.app.status.sync.status}}"
                      },
                      {
                        "name": "Repository",
                        "value": "{{.app.spec.source.repoURL}}"
                      }
                      {{range $index, $c := .app.status.conditions}}
                      {{if not $index}},{{end}}
                      {{if $index}},{{end}}
                      {
                        "name": "{{$c.type}}",
                        "value": "{{$c.message}}"
                      }
                      {{end}}
                    ]
                  }
                ],
                "attachments": []
              }
      template.app-sync-running: |
        webhook:
          discord:
            method: POST
            body: |
              {
                "content": null,
                "embeds": [
                  {
                    "title": "[{{ .app.metadata.name}}] - Start syncing application {{.app.metadata.name}}.",
                    "description": "The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\nSync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .",
                    "url": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": 896490,
                    "fields": [
                      {
                        "name": "Sync Status",
                        "value": "{{.app.status.sync.status}}"
                      },
                      {
                        "name": "Repository",
                        "value": "{{.app.spec.source.repoURL}}"
                      }
                      {{range $index, $c := .app.status.conditions}}
                      {{if not $index}},{{end}}
                      {{if $index}},{{end}}
                      {
                        "name": "{{$c.type}}",
                        "value": "{{$c.message}}"
                      }
                      {{end}}
                    ]
                  }
                ],
                "attachments": []
              } 
      template.app-sync-status-unknown: |
        webhook:
          discord:
            method: POST
            body: |
              {
                "content": null,
                "embeds": [
                  {
                    "title": "[{{ .app.metadata.name}}] - Application {{.app.metadata.name}} sync status is 'Unknown'",
                    "description": "Application {{.app.metadata.name}} sync is 'Unknown'.\nApplication details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.",
                    "url": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": 15297910,
                    "fields": [
                      {
                        "name": "Sync Status",
                        "value": "{{.app.status.sync.status}}"
                      },
                      {
                        "name": "Repository",
                        "value": "{{.app.spec.source.repoURL}}"
                      }
                      {{range $index, $c := .app.status.conditions}}
                      {{if not $index}},{{end}}
                      {{if $index}},{{end}}
                      {
                        "name": "{{$c.type}}",
                        "value": "{{$c.message}}"
                      }
                      {{end}}
                    ]
                  }
                ],
                "attachments": []
              }
      template.app-sync-succeeded: |
        webhook:
          discord:
            method: POST
            body: |
              {
                "content": null,
                "embeds": [
                  {
                    "title": "[{{ .app.metadata.name}}] - Application {{.app.metadata.name}} has been successfully synced.",
                    "description": "Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\nSync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .",
                    "url": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
                    "color": 1621586,
                    "fields": [
                      {
                        "name": "Sync Status",
                        "value": "{{.app.status.sync.status}}"
                      },
                      {
                        "name": "Repository",
                        "value": "{{.app.spec.source.repoURL}}"
                      }
                      {{range $index, $c := .app.status.conditions}}
                      {{if not $index}},{{end}}
                      {{if $index}},{{end}}
                      {
                        "name": "{{$c.type}}",
                        "value": "{{$c.message}}"
                      }
                      {{end}}
                    ]
                  }
                ],
                "attachments": []
              }

    # -- The trigger defines the condition when the notification should be sent
    ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/
    triggers:
      trigger.on-deployed: |
        - description: Application is synced and healthy. Triggered once per commit.
          oncePer: app.status.sync.revision
          send:
          - app-deployed
          when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      trigger.on-health-degraded: |
        - description: Application has degraded
          send:
          - app-health-degraded
          when: app.status.health.status == 'Degraded'
      trigger.on-sync-failed: |
        - description: Application syncing has failed
          send:
          - app-sync-failed
          when: app.status.operationState.phase in ['Error', 'Failed']
      trigger.on-sync-running: |
        - description: Application is being synced
          send:
          - app-sync-running
          when: app.status.operationState.phase in ['Running']
      trigger.on-sync-status-unknown: |
        - description: Application status is 'Unknown'
          send:
          - app-sync-status-unknown
          when: app.status.sync.status == 'Unknown'
      trigger.on-sync-succeeded: |
        - description: Application syncing has succeeded
          send:
          - app-sync-succeeded
          when: app.status.operationState.phase in ['Succeeded']
      # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/#default-triggers
      # defaultTriggers: |
      #   - on-sync-status-unknown