longhorn:
  networkPolicies:
    # -- Setting that allows you to enable network policies that control access to Longhorn pods.
    enabled: false
    # -- Distribution that determines the policy for allowing access for an ingress. (Options: "k3s", "rke2", "rke1")
    type: "k3s"

  persistence:
    # -- Setting that allows you to specify the default Longhorn StorageClass.
    defaultClass: true
    # -- Replica count of the default Longhorn StorageClass.
    defaultClassReplicaCount: 2
    # -- Reclaim policy that provides instructions for handling of a volume after its claim is released. (Options: "Retain", "Delete")
    reclaimPolicy: Retain
    # -- Setting that allows you to enable live migration of a Longhorn volume from one node to another.
    migratable: false

    recurringJobSelector:
      # -- Setting that allows you to enable the recurring job selector for a Longhorn StorageClass.
      enable: true
      # -- Recurring job selector for a Longhorn StorageClass. Ensure that quotes are used correctly when specifying job parameters. (Example: `[{"name":"backup", "isGroup":true}]`)
      jobList: '[{"name":"snapshot-default","task":"snapshot","cron":"0 5 * * *","retain":1},{"name":"backup-default","task":"backup","cron":"0 6 * * *","retain":3}]'

  preUpgradeChecker:
    # -- Setting that allows Longhorn to perform pre-upgrade checks. Disable this setting when installing Longhorn using Argo CD or other GitOps solutions.
    jobEnabled: false
    # -- Setting that allows Longhorn to perform upgrade version checks after starting the Longhorn Manager DaemonSet Pods. Disabling this setting also disables `preUpgradeChecker.jobEnabled`. Longhorn recommends keeping this setting enabled.
    upgradeVersionCheck: true

  defaultSettings:
    # -- Endpoint used to access the backupstore. (Options: "NFS", "CIFS", "AWS", "GCP", "AZURE")
    backupTarget: s3://longhorn-backups@us-east-1/
    # -- Name of the Kubernetes secret associated with the backup target.
    backupTargetCredentialSecret: longhorn-backup-target-credential-secret
    # -- Setting that allows Longhorn to automatically attach a volume and create snapshots or backups when recurring jobs are run.
    allowRecurringJobWhileVolumeDetached: ~
    # -- Default path for storing data on a host. The default value is "/var/lib/longhorn/".
    defaultDataPath: /data/longhorn
    # -- Default Longhorn StorageClass. "storageClassName" is assigned to PVs and PVCs that are created for an existing Longhorn volume. "storageClassName" can also be used as a label, so it is possible to use a Longhorn StorageClass to bind a workload to an existing PV without creating a Kubernetes StorageClass object. The default value is "longhorn-static".
    defaultLonghornStaticStorageClass: longhorn
    # -- Maximum number of successful recurring backup and snapshot jobs to be retained. When the value is "0", a history of successful recurring jobs is not retained.
    recurringSuccessfulJobsHistoryLimit: ~
    # -- Maximum number of failed recurring backup and snapshot jobs to be retained. When the value is "0", a history of failed recurring jobs is not retained.
    recurringFailedJobsHistoryLimit: ~
    # -- Maximum number of snapshots or backups to be retained.
    recurringJobMaxRetention: ~
    # -- Taint or toleration for system-managed Longhorn components.
    # Specify values using a semicolon-separated list in `kubectl taint` syntax (Example: key1=value1:effect; key2=value2:effect).
    # taintToleration: node-role.kubernetes.io/master=true:NoSchedule
    # -- Maximum number of replicas that can be concurrently rebuilt on each node.
    concurrentReplicaRebuildPerNodeLimit: 2
    # -- Maximum number of volumes that can be concurrently restored on each node using a backup. When the value is "0", restoration of volumes using a backup is disabled.
    concurrentVolumeBackupRestorePerNodeLimit: 2
    # -- Setting that allows Longhorn to automatically clean up the system-generated snapshot after replica rebuilding is completed.
    autoCleanupSystemGeneratedSnapshot: ~
    # -- Setting that allows Longhorn to automatically clean up the snapshot generated by a recurring backup job.
    autoCleanupRecurringJobBackupSnapshot: ~
    # -- Maximum number of engines that are allowed to concurrently upgrade on each node after Longhorn Manager is upgraded. When the value is "0", Longhorn does not automatically upgrade volume engines to the new default engine image version.
    concurrentAutomaticEngineUpgradePerNodeLimit: ~
    # -- Storage network for in-cluster traffic. When unspecified, Longhorn uses the Kubernetes cluster network.
    storageNetwork: ~
    # -- Flag that prevents accidental uninstallation of Longhorn.
    deletingConfirmationFlag: true
    # -- Setting that allows Longhorn to automatically mark the latest snapshot and its parent files as removed during a filesystem trim. Longhorn does not remove snapshots containing multiple child files.
    removeSnapshotsDuringFilesystemTrim: ~
    # -- Log levels that indicate the type and severity of logs in Longhorn Manager. The default value is "Info". (Options: "Panic", "Fatal", "Error", "Warn", "Info", "Debug", "Trace")
    logLevel: ~
    # -- Maximum number of worker threads that can concurrently run for each backup.
    backupConcurrentLimit: 2
    # -- Maximum number of worker threads that can concurrently run for each restore operation.
    restoreConcurrentLimit: 2
    # -- Setting that allows Longhorn to periodically collect anonymous usage data for product improvement purposes. Longhorn sends collected data to the [Upgrade Responder](https://github.com/longhorn/upgrade-responder) server, which is the data source of the Longhorn Public Metrics Dashboard (https://metrics.longhorn.io). The Upgrade Responder server does not store data that can be used to identify clients, including IP addresses.
    allowCollectingLonghornUsageMetrics: false
    # -- Setting that temporarily prevents all attempts to purge volume snapshots.
    disableSnapshotPurge: ~
    # -- Maximum snapshot count for a volume. The value should be between 2 to 250
    snapshotMaxCount: ~

  longhornManager:
    log:
      # -- Format of Longhorn Manager logs. (Options: "plain", "json")
      format: plain
    # -- Toleration for Longhorn Manager on nodes allowed to run Longhorn Manager.
    # tolerations:
    # - key: node-role.kubernetes.io/master
    #   operator: Equal
    #   value: "true"
    #   effect: NoSchedule

  # longhornDriver:
  #   # -- Toleration for Longhorn Driver on nodes allowed to run Longhorn components.
  #   # tolerations:
  #   # - key: node-role.kubernetes.io/master
  #   #   operator: Equal
  #   #   value: "true"
  #   #   effect: NoSchedule

  longhornUI:
    # -- Replica count for Longhorn UI.
    replicas: 1
    # -- Toleration for Longhorn UI on nodes allowed to run Longhorn components.
    # tolerations:
    # - key: node-role.kubernetes.io/master
    #   operator: Equal
    #   value: "true"
    #   effect: NoSchedule 

  ingress:
    # -- Setting that allows Longhorn to generate ingress records for the Longhorn UI service.
    enabled: true

    # -- IngressClass resource that contains ingress configuration, including the name of the Ingress controller.
    # ingressClassName can replace the kubernetes.io/ingress.class annotation used in earlier Kubernetes releases.
    ingressClassName: nginx

    # -- Hostname of the Layer 7 load balancer.
    host: longhorn.local.tecno-fly.com

    # -- Setting that allows you to enable TLS on ingress records.
    tls: true

    # -- Setting that allows you to enable secure connections to the Longhorn UI service via port 443.
    secureBackends: true

    # -- TLS secret that contains the private key and certificate to be used for TLS. This setting applies only when TLS is enabled on ingress records.
    tlsSecret: longhorn-tls

    # -- Default ingress path. You can access the Longhorn UI by following the full ingress path {{host}}+{{path}}.
    path: /

    ## If you're using kube-lego, you will want to add:
    ## kubernetes.io/tls-acme: true
    ##
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
    ##
    ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
    # -- Ingress annotations in the form of key-value pairs.
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      # kubernetes.io/tls-acme: true
      hajimari.io/appName: Longhorn
      hajimari.io/icon: server
      hajimari.io/group: K8s - Tools
      hajimari.io/targetBlank: 'false'

  # -- Setting that allows you to enable pod security policies (PSPs) that allow privileged Longhorn pods to start. This setting applies only to clusters running Kubernetes 1.25 and earlier, and with the built-in Pod Security admission controller enabled.
  enablePSP: false

  metrics:
    serviceMonitor:
      # -- Setting that allows the creation of a Prometheus ServiceMonitor resource for Longhorn Manager components.
      enabled: true #Ansible
