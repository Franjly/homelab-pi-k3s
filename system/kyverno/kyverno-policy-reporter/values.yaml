policy-reporter:
  replicaCount: 1

  # When using a custom port together with the PolicyReporter UI
  # the port has also to be changed in the UI subchart as well because it can't access the parent values.
  # You can change the port under `ui.policyReporter.port`
  port:
    name: http
    number: 8080

  # Key/value pairs that are attached to all resources.
  annotations: {}

  # Create cluster role policies
  rbac:
    enabled: true

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  service:
    enabled: true
    ## configuration of service
    # key/value
    annotations: {}
    # key/value
    labels: {}
    type: ClusterIP
    # integer number. This is port for service
    port: 8080

  # Allow additional env variables to be added
  envVars: []

  # Enable a NetworkPolicy for this chart. Useful on clusters where Network Policies are
  # used and configured in a default-deny fashion.
  networkPolicy:
    enabled: false
    # Kubernetes API Server
    egress:
    - to:
      ports:
      - protocol: TCP
        port: 6443
    ingress: []

  ## Set to true to enable ingress record generation
  # ref to: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-staging
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: kyverno-policy-reporter.local.tecno-fly.com
        paths:
          - path: "/(.*)"
            pathType: Prefix
    tls:
      - secretName: kyverno-policy-reporter-tls
        hosts:
          - kyverno-policy-reporter.local.tecno-fly.com

  logging:
    encoding: console # possible encodings are console and json
    logLevel: 0 # default info
    development: false # more human readable structure, enables stacktraces and removes log sampling

  api:
    logging: false # enable debug API access logging, sets logLevel to debug

  # REST API
  rest:
    enabled: false

  # Prometheus Metrics API
  metrics:
    enabled: true
    mode: detailed # available modes are detailed, simple and custom
    customLabels: [] # only used for custom mode. Supported fields are: ["namespace", "rule", "policy", "report" // PolicyReport name, "kind" // resource kind, "name" // resource name, "status", "severity", "category", "source"]
  #  filter:
  #    sources:
  #      exclude: ["Trivy CIS Kube Bench"]
  #    status:
  #      exclude: ["pass", "skip"]

  profiling:
    enabled: false

  # amount of queue workers for PolicyReport resource processing
  worker: 5

  # Filter PolicyReport resources to process
  reportFilter:
    namespaces:
      # Process only PolicyReport resources from an included namespace, wildcards are supported
      include: []
      # Ignore all PolicyReport resources from a excluded namespace, wildcards are supported
      # exclude will be ignored if an include filter exists
      exclude: []
    clusterReports:
      # Disable the processing of ClusterPolicyReports
      disabled: false

  # customize source specific logic like result ID generation
  sourceConfig: {}
  # sourcename:
  #   customID:
  #     enabled: true
  #     fields: ["resource", "policy", "rule", "category", "result", "message"]

  # Settings for the Policy Reporter UI subchart (see subchart's values.yaml)
  ui:
    enabled: true
    
    plugins:
      kyverno: true
    
    ingress:
      enabled: true
      className: "nginx"
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-staging
        nginx.ingress.kubernetes.io/rewrite-target: /$1
      hosts:
        - host: kyverno.local.tecno-fly.com
          paths:
            - path: "/(.*)"
              pathType: Prefix
      tls:
        - secretName: kyverno-tls
          hosts:
            - kyverno.local.tecno-fly.com

  kyvernoPlugin:
    enabled: true

  # Settings for the monitoring subchart
  monitoring:
    enabled: false

  database:
    # Database Type, supported: mysql, postgres, mariadb
    type: ""
    database: "" # Database Name
    username: ""
    password: ""
    host: ""
    enableSSL: false
    # instead of configure the individual values you can also provide an DSN string
    # example postgres: postgres://postgres:password@localhost:5432/postgres?sslmode=disable
    # example mysql: root:password@tcp(localhost:3306)/test?tls=false
    dsn: ""
    # configure an existing secret as source for your values
    # supported fields: username, password, host, dsn, database
    secretRef: ""
    # use an mounted secret as source for your values, required the information in JSON format
    # supported fields: username, password, host, dsn, database
    mountedSecret: ""

  global:
    # available plugins
    plugins:
      # enable kyverno for Policy Reporter UI and monitoring
      kyverno: false
    # The name of service policy-report. Defaults to ReleaseName.
    backend: ""
    # overwrite the fullname of all resources including subcharts
    fullnameOverride: ""
    # configure the namespace of all resources including subcharts
    namespace: ""
    # additional labels added on each resource
    labels: {}
    # basicAuth for APIs and metrics
    basicAuth:
      # HTTP BasicAuth username
      username: ""
      # HTTP BasicAuth password
      password: ""
      # read credentials from secret
      secretRef: ""

  # Reference a configuration which already exists instead of creating one
  existingTargetConfig:
    enabled: false
    # Name of the secret with the config
    name: ""
    # subPath within the secret (defaults to config.yaml)
    subPath: ""

  # Supported targets for new PolicyReport Results
  target:
    loki:
      # loki host address
      host: ""
      # path to your custom certificate
      # can be added under extraVolumes
      certificate: ""
      # skip TLS verification if necessary
      skipTLS: false
      # receive the host from an existing secret instead
      secretRef: ""
      # Mounted secret path by Secrets Controller, secret should be in json format
      mountedSecret: ""
      # loki api path, defaults to "/api/prom/push" (deprecated)
      path: ""
      # minimum priority "" < info < warning < critical < error
      minimumPriority: ""
      # list of sources which should send to loki
      sources: []
      # Skip already existing PolicyReportResults on startup
      skipExistingOnStartup: true
      # Added as additional labels to each Loki event
      customLabels: {}
      # Additional custom HTTP Headers
      headers: {}
      # HTTP BasicAuth credentials for Loki
      username: ""
      password: ""
      # Filter Results which should send to this target by report labels, namespaces, priorities or policies
      # Wildcars for namespaces and policies are supported, you can either define exclude or include values
      # Filters are available for all targets except the UI
      filter: {}
  #      namespaces:
  #        include: ["develop"]
  #      priorities:
  #        exclude: ["debug", "info", "error"]
  #      labels:
  #        include: ["app", "owner:team-a", "monitoring:*"]
      channels: []
  #    - host: "http://loki.loki-stack:3100"
  #      sources: []
  #      customLabels: {}
  #      filter:
  #        namespaces:
  #          include: ["develop"]
  #        priorities:
  #          exclude: ["debug", "info", "error"]
  #        reportLabels:
  # .         include: ["app", "owner:team-b"]

    discord:
      # discord app webhook address
      webhook: ""
      # receive the webhook from an existing secret instead
      secretRef: ""
      # Mounted secret path by Secrets Controller, secret should be in json format
      mountedSecret: ""
      # minimum priority "" < info < warning < critical < error
      minimumPriority: ""
      # list of sources which should send to discord
      sources: []
      # Skip already existing PolicyReportResults on startup
      skipExistingOnStartup: true
      # filter results send by namespaces, policies and priorities
      filter: {}
      # add additional discord channels with different configurations and filters
      channels: []

    ui:
      # ui host address
      host: ""
      # path to your custom certificate
      # can be added under extraVolumes
      certificate: ""
      # skip TLS verification if necessary
      skipTLS: false
      # minimum priority "" < info < warning < critical < error
      minimumPriority: "warning"
      # list of sources which should send to the UI Log
      sources: []
      # Skip already existing PolicyReportResults on startup
      skipExistingOnStartup: true

    webhook:
      # webhook host address
      host: ""
      # path to your custom certificate
      # can be added under extraVolumes
      certificate: ""
      # skip TLS verification if necessary
      skipTLS: false
      # receive the host and/or token from an existing secret, the token is added as Authorization header
      secretRef: ""
      # Mounted secret path by Secrets Controller, secret should be in json format
      mountedSecret: ""
      # additional http headers
      headers: {}
      # minimum priority "" < info < warning < critical < error
      minimumPriority: ""
      # list of sources which should send to the UI Log
      sources: []
      # Skip already existing PolicyReportResults on startup
      skipExistingOnStartup: true
      # Added as additional properties to each webhook event
      customFields: {}
      # filter results send by namespaces, policies and priorities
      filter: {}
      # add additional webhook channels with different configurations and filters
      channels: []

    s3:
      # S3 access key
      accessKeyID: ""
      # S3 secret access key
      secretAccessKey: ""
      # receive the accessKeyID and/or secretAccessKey from an existing secret instead
      secretRef: ""
      # Mounted secret path by Secrets Controller, secret should be in json format
      mountedSecret: ""
      # S3 storage region
      region: ""
      # S3 storage endpoint
      endpoint: ""
      # S3 storage, bucket name
      bucket: ""
      # S3 storage to use an S3 Bucket Key for object encryption with SSE-KMS
      bucketKeyEnabled: false
      # S3 storage KMS Key ID for object encryption with SSE-KMS
      kmsKeyId: ""
      # S3 storage server-side encryption algorithm used when storing this object in Amazon S3, AES256, aws:kms
      serverSideEncryption: ""
      # S3 storage, force path style configuration
      pathStyle: false
      # name of prefix, keys will have format: s3://<bucket>/<prefix>/YYYY-MM-DD/YYYY-MM-DDTHH:mm:ss.s+01:00.json
      prefix: ""
      # minimum priority "" < info < warning < critical < error
      minimumPriority: ""
      # list of sources which should send to S3
      sources: []
      # Skip already existing PolicyReportResults on startup
      skipExistingOnStartup: true
      # Added as additional properties to each s3 event
      customFields: {}
      # filter results send by namespaces, policies and priorities
      filter: {}
      # add additional s3 channels with different configurations and filters
      channels: []

  # use redis as external result cache instead of the in memory cache
  redis:
    enabled: false
    address: ""
    database: 0
    prefix: "policy-reporter"
    username: ""
    password: ""

  # Node labels for pod assignment
  # ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}

  # Tolerations for pod assignment
  # ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  extraVolumes:
    volumeMounts: []

    volumes: []

  # If set the volume for sqlite is freely configurable below "- name: sqlite". If no value is set an emptyDir is used.
  sqliteVolume: {}
    # emptyDir:
    #   sizeLimit: 10Mi

  # If set the volume for /tmp is freely configurable below "- name: tmp". If no value is set an emptyDir is used.
  tmpVolume: {}
    # emptyDir:
    #   sizeLimit: 10Mi